# Arthas命令配置文件
# 用于定义不同CPU问题场景下的诊断命令

# 1. 线程分析命令
[thread_analysis]
# 获取所有线程信息，按CPU使用率排序
thread_all=thread -n 20
# 获取指定线程的详细信息
thread_detail=thread <thread_id>
# 获取线程状态统计
thread_stat=thread -b

# 2. CPU热点分析命令
[cpu_analysis]
# 分析CPU使用情况，采样10秒，显示前10个热点方法
cpu_hotspot=cpu -i 10000 -n 10
# 分析CPU使用情况，采样30秒，显示前20个热点方法
cpu_hotspot_extended=cpu -i 30000 -n 20
# 分析指定方法的CPU使用情况
cpu_method=cpu -c <class_name> <method_name>

# 3. 方法调用栈分析命令
[stack_analysis]
# 分析线程运行时的调用栈
stack_thread=stack java.lang.Thread run
# 分析指定方法的调用栈
stack_method=stack <class_name> <method_name>
# 分析异常时的调用栈
stack_exception=stack java.lang.Exception

# 4. 方法执行跟踪命令
[trace_analysis]
# 跟踪方法执行时间
trace_method=trace <class_name> <method_name>
# 跟踪方法执行，包含异常
trace_method_with_exception=trace <class_name> <method_name> -E
# 跟踪方法执行，显示参数
trace_method_with_params=trace <class_name> <method_name> '#cost>100'

# 5. 内存分析命令
[memory_analysis]
# 查看堆内存使用情况
heap_dump=heapdump /tmp/heap_dump.hprof
# 查看对象统计
object_stats=heapdump --live /tmp/live_heap_dump.hprof
# 查看类加载统计
class_stats=classloader -a

# 6. 系统监控命令
[system_monitor]
# 获取系统仪表板信息
dashboard=dashboard
# 获取JVM信息
jvm=jvm
# 获取系统属性
sysprop=sysprop
# 获取环境变量
sysenv=sysenv

# 7. 性能分析命令
[performance_analysis]
# 监控方法执行时间
monitor=monitor <class_name> <method_name> '#cost>100'
# 分析方法调用链
stack_trace=stack <class_name> <method_name>
# 分析方法调用次数
invoke_count=monitor <class_name> <method_name> -c

# 8. 死锁检测命令
[deadlock_detection]
# 检测死锁
deadlock=thread -b
# 分析线程状态
thread_state=thread -n 20

# 9. GC分析命令
[gc_analysis]
# 查看GC统计信息
gc_stats=jvm
# 手动触发GC
gc_manual=gc

# 10. 网络分析命令
[network_analysis]
# 分析网络连接
network_connections=netstat
# 分析网络IO
network_io=netstat -i

# 11. 文件IO分析命令
[file_io_analysis]
# 分析文件IO操作
file_io=stack java.io.FileInputStream read
# 分析文件操作
file_operations=stack java.io.File

# 12. 数据库分析命令
[database_analysis]
# 分析数据库连接
db_connection=stack java.sql.Connection
# 分析SQL执行
sql_execution=stack java.sql.PreparedStatement execute
# 分析数据库连接池
connection_pool=stack com.zaxxer.hikari.HikariDataSource

# 13. 缓存分析命令
[cache_analysis]
# 分析Redis操作
redis_operations=stack redis.clients.jedis.Jedis
# 分析本地缓存
local_cache=stack java.util.concurrent.ConcurrentHashMap

# 14. 异步任务分析命令
[async_analysis]
# 分析线程池
thread_pool=stack java.util.concurrent.ThreadPoolExecutor
# 分析异步任务
async_task=stack java.util.concurrent.CompletableFuture
# 分析定时任务
scheduled_task=stack java.util.concurrent.ScheduledExecutorService

# 15. 自定义分析命令
[custom_analysis]
# 分析自定义业务方法
business_method=stack com.example.BusinessService
# 分析特定包下的方法
package_methods=stack com.example.*
# 分析特定注解的方法
annotated_methods=stack @org.springframework.stereotype.Service

# 命令执行超时时间（秒）
[timeout]
thread_analysis=30
cpu_analysis=60
stack_analysis=30
trace_analysis=20
memory_analysis=120
system_monitor=15
performance_analysis=45
deadlock_detection=30
gc_analysis=30
network_analysis=30
file_io_analysis=30
database_analysis=30
cache_analysis=30
async_analysis=30
custom_analysis=30 